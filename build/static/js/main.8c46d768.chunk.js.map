{"version":3,"sources":["Jennifer_banner.png","services/songs.js","components/Songs.js","components/Gigs.js","components/Section.js","components/AdminSection.js","services/gigs.js","components/NewGig.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","baseUrl","services_songs","getAll","nonExisting","id","read","lyrics","name","axios","get","then","response","Object","objectSpread","data","concat","create","newObject","post","update","put","Song","props","_useState","useState","_useState2","slicedToArray","visibility","setVisibility","filledInLyrics","map","item","undefined","text","source","find","part","type","readingStatus","divStyle","display","label","react_default","a","createElement","className","onClick","evt","stopPropagation","toggleImportance","style","i","splittedParts","split","key","addParagraphs","Songs","songs","song","Songs_Song","n","changedSong","songsService","setSongs","catch","error","setErrorMessage","setTimeout","filter","toggleImportanceOf","Images","_ref","images","alt","url","src","Gig","_ref2","date","place","playlist","Gigs_Images","Gigs","_useState3","_useState4","showAll","setShowAll","filteredGigs","gigs","gig","dateStr","dateNow","Date","console","log","dateArr","gigDate","getTime","isUpcoming","Gigs_Gig","Section","title","component","AdminSection","services_gigs","NewGig","setGigs","showtime","link","newGig","setNewGig","handleGigChange","defineProperty","target","value","onSubmit","preventDefault","gigObject","gigsService","onChange","e","size","cols","rows","App","_useState5","_useState6","errorMessage","useEffect","banner","message","components_Section","components_Songs","components_Gigs","components_AdminSection","components_NewGig","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c46d768.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Jennifer_banner.ff0209f6.png\";","import axios from 'axios'\r\nconst baseUrl = 'https://jenniferserver.herokuapp.com/songs'\r\n\r\nconst getAll = () => {\r\n   const nonExisting = {\r\n        id: 10000,\r\n        read:false,\r\n        lyrics: [],\r\n        name: \"not a song\"\r\n      } \r\n   // return axios.get(baseUrl);\r\n   const request = axios.get(baseUrl);\r\n   return request.then(response => {return {...response, data: response.data.concat(nonExisting)}})\r\n    }\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update \r\n}","import React, { useState } from 'react';\r\nimport songsService from '../services/songs'\r\n\r\nconst fillInLyrics = (lyrics) => {\r\n    return lyrics.map(item => {\r\n        if(item.text === undefined){\r\n            const source = lyrics.find(part => part.type === item.type);\r\n            return source.text ? {...item, text: source.text} : {...item, text: \"...\"};\r\n        } else {\r\n            return item;\r\n        }\r\n    })\r\n}\r\n\r\nconst addParagraphs = (part) => {\r\n     return part.text.split('\\n').map((item, i) => {\r\n        return <p key={i}>{item}</p>;\r\n    });\r\n }\r\n\r\nconst Song = (props) => {\r\n    const [ visibility, setVisibility ] = useState('none');\r\n    const filledInLyrics = fillInLyrics(props.lyrics);\r\n\r\n    const handleClick = (evt) => {\r\n        //console.log('clicked', visibility);\r\n        evt.stopPropagation();\r\n        if(visibility !== 'none'){\r\n            setVisibility('none');\r\n        } else {\r\n            setVisibility('block');\r\n        }\r\n    }\r\n\r\n    const readingStatus = props.read ? \"Songs-read\" : \"Songs-unread\";\r\n    const divStyle = {display: visibility};\r\n    const label = props.read ? 'merkitse lukemattomaksi' : 'merkitse luetuksi'\r\n\r\n    return (\r\n        <div className=\"Songs-song\"  onClick={handleClick}>\r\n            <h3 className={readingStatus}>{props.name}</h3>\r\n            <button onClick={props.toggleImportance}>{label}</button>\r\n            <div style={divStyle}>\r\n                {\r\n                filledInLyrics.map((part, i) => {\r\n                const splittedParts = addParagraphs(part);\r\n                return(\r\n                    <div className={\"Songs-\" + part.type} key={i} >\r\n                    {splittedParts}\r\n                    </div>\r\n                )})}\r\n            </div>\r\n        </div>\r\n)} \r\n\r\nconst Songs = (props) => {\r\n\r\n    const toggleImportanceOf = (evt, id) => {\r\n        evt.stopPropagation();\r\n       // const url = `http://localhost:3001/songs/${id}`\r\n        const song = props.songs.find(n => n.id === id)\r\n        const changedSong = { ...song, read: !song.read }\r\n      \r\n        songsService\r\n        .update(id, changedSong)\r\n        .then(response => {\r\n          props.setSongs(props.songs.map(song => song.id !== id ? song : response.data))\r\n        })\r\n        .catch(error => {\r\n            // alert(\r\n            //   `tätä biisiä ei ole enää palvelimella '${song.name}'`\r\n            // )\r\n            props.setErrorMessage(`tätä biisiä ei ole enää palvelimella '${song.name}'`);\r\n            setTimeout(() => {\r\n                props.setErrorMessage(null)\r\n              }, 5000)\r\n            props.setSongs(props.songs.filter(n => n.id !== id))\r\n          })\r\n      }\r\n    return (\r\n      <div className=\"Songs-songs\">\r\n        {props.songs.map(song => {\r\n            return(\r\n            <Song key={song.id} name={song.name} lyrics={song.lyrics} read={song.read} toggleImportance={(evt) => toggleImportanceOf(evt, song.id)} />\r\n            )})}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Songs;","import React, { useState } from 'react'\r\n\r\nconst Images = ({images, alt}) => {\r\n    return images.map((url, i) => {\r\n        return (\r\n            <img className=\"Gigs-img\" src={url} alt={alt+i} key={i} />\r\n        )\r\n    })\r\n}\r\n\r\nconst Gig = ({date, place, playlist, images}) => {\r\n    const [ visibility, setVisibility ] = useState('none');\r\n\r\n    const handleClick = (evt) => {\r\n        //console.log('clicked', visibility);\r\n        evt.stopPropagation();\r\n        if(visibility !== 'none'){\r\n            setVisibility('none');\r\n        } else {\r\n            setVisibility('block');\r\n        }\r\n    }\r\n\r\n    const divStyle = {display: visibility};\r\n    //debugger\r\n    return (\r\n        <div className=\"Gigs-gig\"  onClick={handleClick}>\r\n            <h3>{date} @ {place} </h3>\r\n\r\n            <div style={divStyle}>\r\n                <h4>Biisilista</h4>\r\n                <ol>\r\n                {\r\n                playlist.map((song, i) => {\r\n                return(\r\n                    <li className=\"Gigs-song\" key={i} >\r\n                    {song}\r\n                    </li>\r\n                )})}\r\n                </ol>\r\n                <h4>Kuvia keikalta</h4>\r\n                <div className=\"Gigs-images-container\">\r\n                <Images images={images} alt={place}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n)} \r\n\r\nconst isUpcoming = (dateStr) => {\r\n    const dateNow= new Date();\r\n    console.log(dateNow, dateStr);\r\n    const dateArr = dateStr.split(\".\");\r\n    const gigDate=new Date(dateArr[2],dateArr[1]-1,dateArr[0],0,0,0);\r\n    return dateNow.getTime() < gigDate.getTime();\r\n}\r\n\r\nconst Gigs = (props) => {\r\n    const [ showAll, setShowAll ] = useState(true);\r\n    const handleClick = (evt) => {\r\n        evt.stopPropagation();\r\n        setShowAll(!showAll);\r\n    }\r\n    const filteredGigs = showAll ? props.gigs : props.gigs.filter(gig => isUpcoming(gig.date));\r\n    console.log(filteredGigs);\r\n    return (\r\n      <div className=\"Gigs\">\r\n        <button onClick={handleClick}>{!showAll ? \"Näytä kaikki\":\"Näytä tulevat\"}</button>\r\n        {filteredGigs.map(gig => {\r\n            return(\r\n            <Gig key={gig.id} place={gig.place} date={gig.date} playlist={gig.playlist} images={gig.images} />\r\n            )})}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Gigs;","import React, { useState } from 'react';\r\n\r\nconst Section = (props) => {\r\n    const [ visibility, setVisibility ] = useState('none');\r\n    \r\n    const handleClick = () => {\r\n        if(visibility !== 'none'){\r\n            setVisibility('none');\r\n        } else {\r\n            setVisibility('block');\r\n        }\r\n    }\r\n\r\n    const divStyle = {display: visibility};\r\n\r\n    return (\r\n        <div className=\"Section\"  onClick={handleClick}>\r\n            <h1>{props.title}</h1>\r\n            <div style={divStyle}>\r\n                {props.component}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Section;","import React, { useState } from 'react'\r\n\r\nconst AdminSection = (props) => {\r\n\r\n    return (\r\n        <div className=\"Section\">\r\n            <h1>{props.title}</h1>\r\n            <div>\r\n                {props.component}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminSection;","import axios from 'axios'\r\nconst baseUrl = 'https://jenniferserver.herokuapp.com/gigs'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update \r\n}","import React, { useState } from 'react';\r\nimport gigsService from '../services/gigs';\r\n\r\nconst NewGig = ({gigs, setGigs}) => {\r\n  const [newGig, setNewGig] = useState({place: \"\", date: \"\", showtime: \"\",  link: \"\", id: null, playlist: [], images:[]});\r\n    \r\n    const addGig = (evt) => {\r\n      evt.preventDefault();\r\n      const gigObject = {...newGig};\r\n\r\n      gigsService\r\n        .create(gigObject)\r\n        .then(response => {\r\n          setGigs(gigs.concat(response.data))\r\n          setNewGig({place: \"\", date: \"\", showtime: \"\",  link: \"\", id: null, playlist: [], images:[]});\r\n        })\r\n    } \r\n\r\n    const handleGigChange = (evt, type) => {\r\n      setNewGig({...newGig, [type]: evt.target.value});\r\n    }\r\n  \r\n    return (\r\n      <div className=\"NewGig\">\r\n        <form onSubmit={addGig}>\r\n        Keikkapäivä: <input onChange={e => handleGigChange(e, \"date\")} value={newGig.date}/> <br />\r\n        Paikka: <input onChange={e => handleGigChange(e, \"place\")} value={newGig.place}/> <br />\r\n        Showtime: <input onChange={e => handleGigChange(e, \"showtime\")} value={newGig.showtime}/> <br />\r\n        Linkki: <input onChange={e => handleGigChange(e, \"link\")} value={newGig.link} size={30}/> <br />\r\n        Playlist: <textarea onChange={e => handleGigChange(e, \"playlist\")} value={newGig.playlist} cols=\"30\" rows=\"20\"/> <br />\r\n        <button type=\"submit\">Lisää</button>\r\n        </form>  \r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default NewGig;\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport banner from './Jennifer_banner.png';\nimport Songs from './components/Songs';\nimport Gigs from './components/Gigs';\nimport Section from './components/Section';\nimport AdminSection from './components/AdminSection';\nimport NewGig from './components/NewGig';\nimport './App.css';\n\nimport gigsService from './services/gigs';\nimport songsService from './services/songs';\n\nfunction App() {\n  const [songs, setSongs] = useState([]);\n  const [gigs, setGigs] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const getGigs = () => {\n    console.log('effect 1')\n    gigsService\n      .getAll()\n      .then(response => {\n       // console.log('promise fulfilled')\n        setGigs(response.data)\n      })\n  };\n\n  const getSongs = () => {\n    console.log('effect 2')\n    songsService\n      .getAll()\n      .then(response => {\n      // console.log('promise fulfilled')\n        setSongs(response.data)\n      })\n  };\n  \n  useEffect(getGigs, []);\n  useEffect(getSongs, []);\n\n  //console.log('render', gigs.length, 'gigs');\n  //console.log('render', songs.length, 'songs');\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={banner} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Tervetuloa Jenniferin sivuille!\n        </p>\n      </header>\n      <div className=\"App-container\">\n        <Notification message={errorMessage} />\n        <Section title=\"Jenniferin biisit\" component={<Songs songs={songs} setSongs={setSongs} setErrorMessage ={setErrorMessage}/>} />\n        <Section title=\"Keikat\" component={<Gigs gigs={gigs} setErrorMessage ={setErrorMessage}/>} />\n        <AdminSection title=\"Admin\" component={<NewGig gigs={gigs} setGigs={setGigs} setErrorMessage ={setErrorMessage}/>}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import songsData from './songsData';\n// import gigsData from './gigsData';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// \nserviceWorker.unregister();\n"],"sourceRoot":""}